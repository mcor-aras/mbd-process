<AML>
 <Item type="Method" id="F43339C68EEE4ADE9CA31576FD8BEAD6" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[	//**************************************************************************************
	// 名称：
	//   
	// 概要：
	//   
	// 
	//   訂符     Ver.     作成日(修正日)       内容
	//
	//
	//*************************************************************************************
// 	 System.Diagnostics.Debugger.Break();
	inn = this.getInnovator();
	string result = "";

	try {
		// パラメタ処理
		model_id = this.getID();
		//テンプレートの取得
		string template = this.GetBaseTamplate();
		//ツリーデータの取得
		Item items = this.GetAllItems();
		if (items.isError()){
			return inn.newError(items.getErrorString());
		}
		string data = SetDataToDict(items);
	    result = template + data + "</table>";
		return inn.newResult(result);
	}
	catch (Exception e) {
		return inn.newError(e.Message);
	}
}
private Innovator inn = null;
private string model_id;      //Model

private Item GetAllItems(){
	Item items = null;
	try {
		items = inn.newItem("SQL", "SQL PROCESS");
		items.setProperty("name", "z_GetSubSystemTreeData");
		items.setProperty("PROCESS", "CALL");
		items.setProperty("ARG1", model_id);
		items =items.apply();
	}
	catch {
		throw;
	}
	return items;
}

private string GetBaseTamplate(){
    StringBuilder gridStyle = new StringBuilder();
    gridStyle.Append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
	gridStyle.Append("<table delim=\"|\" ");
	gridStyle.Append(" font=\"Microsoft Sans Serif-8\"");
	gridStyle.Append(" sel_bgColor=\"steelbue\"");
	gridStyle.Append(" sel_TextColor=\"white\"");
	gridStyle.Append(" header_BgColor=\"buttonface\"");
	gridStyle.Append(" expandroot=\"false\"");
	gridStyle.Append(" expandall=\"false\"");
	gridStyle.Append(" treelines=\"1\"");
	gridStyle.Append(" editable=\"true\"");
	gridStyle.Append(" draw_grid=\"false\"");
	gridStyle.Append(" multiselect=\"false\"");
	gridStyle.Append(" column_draggable=\"true\"");
	gridStyle.Append(" enableHtml=\"false\"");
	gridStyle.Append(" enterAsTab=\"false\"");
	gridStyle.Append(" bgInvert=\"false\"");
	gridStyle.Append(" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"");
	gridStyle.Append(" xmlns:aras=\"http://www.aras.com\"");
	gridStyle.Append(" xmlns:usr=\"urn:the-xml-files:xslt\">");
	gridStyle.Append(" <thead>");
    gridStyle.Append("  <th align=\"c\">Sub System</th>");
    gridStyle.Append("  <th align=\"c\">Image</th>");
	gridStyle.Append(" </thead>");
	gridStyle.Append(" <columns>");
	gridStyle.Append("  <column width=\"600\" edit=\"\"  align=\"l\" order=\"0\" />");
    gridStyle.Append("  <column width=\"200\" edit=\"\"  align=\"l\" order=\"1\" />");
	gridStyle.Append(" </columns>");
	gridStyle.Append(" <menu>");
	gridStyle.Append(" 	<emptytag/>");
	gridStyle.Append(" </menu>");
    return gridStyle.ToString();
}

private string SetDataToDict(Item items){
    
    StringBuilder itemString = new StringBuilder();
    
    for (int i = 0; i < items.getItemCount(); i++){
		Item item =  items.getItemByIndex(i);
		
		int lv = 0;
        int nextlv =0;
        if (!Int32.TryParse(item.getProperty("level", ""), out lv))
        {
            lv = 0;
        }

		itemString.Append("<tr level=\"").Append(Escape(GetIntFromString(item.getProperty("level", ""),0).ToString()));
		itemString.Append("\" icon0=\"../images/Part.svg\" icon1=\"../images/Part.svg\">");
		itemString.Append("<userdata key=\"gridData_rowItemID\" value=\"").Append(Escape(item.getProperty("id", ""))).Append("\" />");

 
 		itemString.Append("<td id=\"").Append(Escape(item.getProperty("id","")));
		itemString.Append("\" link=\"'").Append("z_Draftmodel Subsystem").Append("','").Append(Escape(item.getProperty("id",""))).Append("'\"");
		itemString.Append(">").Append(Escape(item.getProperty("z_subsystem", ""))).Append("</td>");
		
 		itemString.Append("<td id=\"").Append(Escape(item.getProperty("z_image_file","")));
		itemString.Append("\" link=\"'").Append("File").Append("','").Append(Escape(item.getProperty("z_image_file",""))).Append("'\"");
		itemString.Append(">").Append(Escape(item.getProperty("filename", ""))).Append("</td>");

        //itemString.Append(CreateTD(Escape(item.getProperty("z_image_file", ""))));
		// next level
		if (i!= items.getItemCount() - 1){
            if (!Int32.TryParse(items.getItemByIndex(i+1).getProperty("level", ""), out nextlv)){
                nextlv = 0;
            }
		}
		else{
            if (!Int32.TryParse(items.getItemByIndex(0).getProperty("level", ""), out nextlv)){
                nextlv = 0;
            }
		}
		if (nextlv <= lv){
			int trCnt = lv - nextlv +1;
			for (int n=0;n<trCnt;n++){
				itemString.Append("</tr>");
			}
		}
	}
    
    return itemString.ToString();
}

private string CreateTD(string val)
{
	string tag = String.Empty;
	if(String.IsNullOrEmpty(val))
	{
		tag = "<td />";
	}
	else
	{
		tag = String.Format("<td>{0}</td>",val);
	}
	return tag;
}


private int GetIntFromString(string strChange,int intDefault){
	int result = intDefault;
	if (!Int32.TryParse(strChange, out result)){
		result = intDefault;
	}
	return result;
}

private static string Escape(string data){
	return System.Security.SecurityElement.Escape(data);
]]></method_code>
  <method_type>C#</method_type>
  <name>z_CreateSubModelTreeData</name>
 </Item>
</AML>